# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ZSH
# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="powerlevel10k/powerlevel10k"

plugins=(
    git
    docker
    zsh-syntax-highlighting
    zsh-autosuggestions
)

# History command configuration, see https://github.com/mattjj/my-oh-my-zsh/blob/master/history.zsh
# /!\ WARNING be aware that, if you're using oh-my-zsh by default, the oh-my-zsh option overrides 
# the ones you've set in ~/.zshrc, you can fiddle with it in ~/.oh-my-zsh/lib/history.zsh.
# You can also remove duplicates in the file using a simple spreadsheet...
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

source "$ZSH"/oh-my-zsh.sh

# MAVEN
# Get the Maven directory. E.g. /usr/local/Cellar/maven/3.6.3_1/libexec (Mac OS X, brew)
if [ -e ~/.m2/settings.xml ]
then
    if [[ "$(uname)" == "Darwin" ]]; then
        M2_INSTALL_DIR=$(grep -oE "\/[^\"}]+\/mvn" "$(which mvn)" | sed 's#/bin/mvn##')
    else
        M2_INSTALL_DIR=/usr/share/maven
    fi

    PATH=$PATH:$M2_INSTALL_DIR/bin:/usr/local/bin
    export PATH

    # Get the artifactory user and password from your Maven settings.xml
    export ARTIFACTORY_USER=${ARTIFACTORY_USER:-$(grep '<username' ~/.m2/settings.xml | cut -f2 -d">" | cut -f1 -d"<" | head -n1)}
    export ARTIFACTORY_PASSWORD=${ARTIFACTORY_PASSWORD:-$(grep '<password' ~/.m2/settings.xml | cut -f2 -d">" | cut -f1 -d"<" | head -n1)}
fi

# KEYS (Ubuntu & Mac OS X when using zsh)
# Bind key with "ctrl + u" to erase from the cursor position to the beginning of the line, see https://clementc.github.io/blog/2018/01/25/moving_cli/
bindkey \^U backward-kill-line

# ALIASES

# git aliases
alias g="git"
alias ga="git add"
alias gb="git --no-pager branch"
alias gbd="git branch -d"
alias gc="git commit"
alias gcam="git commit -am"
alias gcmsg="git commit -m"
alias gco="git checkout"
alias gcm="git checkout master"
alias gcb="git checkout -b"
alias gcp="git cherry-pick"
alias gd="git diff"
alias gf="git fetch"
alias gfa="git fetch --all"
alias gl="git pull"
alias gm="git merge"
alias gmom="git merge origin/master"
alias gp="git push"
alias gpu="git push --set-upstream origin \$(git branch | grep \* | sed 's/\* //')"
alias gpo="git push origin "
alias grb="git rebase"
alias grba="git rebase --abort"
alias grbi="git rebase -i"
alias grh="git reset HEAD"
alias grhh="git reset HEAD --hard"
alias gs="git status"
alias gsta="git stash"
alias gstp="git stash pop"
alias glr="git ls-remote | grep refs/heads/ | cut -c 53-"
alias gbdf="gbd \$(gb | grep -v \* | grep -v master | fzf -m)"
alias gasf="git add \$(git status -s | sed -E 's/(^ M |^\?\? )//' | fzf)"
alias gmof="git merge origin/\$(gf && glr | fzf)"
alias glrf="gco \$(gf && glr | fzf)"
alias gcof="gco \$(gs | grep modified | sed -e 's/modified://' | fzf -m)"

# Usage `gpmr prod "merge request title"`
function gpmr() {
    git push origin $(git branch --show-current) -o merge_request.target=${1:-master} -o merge_request.create -o merge_request.title="${2:-$(git log -1 --pretty=%B | head -n 1)}";
}

# scripts aliases
alias sort-json="bash ~/sort-json.sh"
alias find-my-commits="bash ~/find-my-commits.sh"
alias generate-password="bash ~/generate-password.sh"
alias create-note="bash ~/create-note.sh"
alias update-all-repos="bash ~/update-all-repos.sh"
alias create-jira="python3 ~/create-jira.py"

# other aliases
if [ -f "/etc/wsl.conf" ]; then
    CUSTOM_HOME=$(wslpath $(cmd.exe /C "echo %USERPROFILE%" 2>/dev/null | tr -d '\r'))
    export CUSTOM_HOME
else
    CUSTOM_HOME=$HOME
fi
alias ccode="code \$( find \$CUSTOM_HOME/ 2>/dev/null | fzf )" # to exclude a path, use '-not -path "$HOME/.m2/*"

# can be replaced with: 'cd <CTRL + T>', which has the advantage of working with any command. For example, 'vim <CTRL + T>'. See also: https://github.com/sharkdp/fd?tab=readme-ov-file#using-fd-with-fzf
alias ccd='cd $( find $CUSTOM_HOME/Documents/ -type d -maxdepth 4 2>/dev/null | fzf)'

 alias fd=fdfind
 
# could be added as aliases
# sudo xdg-open . # Opening the file browser from terminal as root (gnome file)
# kill -9 $(ps aux | grep -i gpg-agent | grep -v grep | awk '{print $2}')
# gcam "$(gb | grep \* | grep -Po '(JIRAPROJECT1|JIRAPROJECT2)-[0-9]+') your commit message"
# git push origin +$(gb | grep \* | sed 's/* //g')
# sudo apt update && sudo apt upgrade && sudo sudo apt autoremove && sudo snap refresh

export GPG_TTY=$TTY # work with zsh and powerlevel10k, see https://thecesrom.dev/2021/01/27/troubleshooting-gpg-signed-commits-on-macos/

# FZF
# if you are using .bashrc and debian (sudo apt install -y fzf):
# source /usr/share/doc/fzf/examples/key-bindings.bash
# source /usr/share/doc/fzf/examples/completion.bash
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f /usr/share/doc/fzf/examples/key-bindings.zsh ] && source /usr/share/doc/fzf/examples/key-bindings.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

if [ -f "/etc/wsl.conf" ]; then
    #code() {
    #    explorer.exe "vscode://file/$(wslpath -w "${PWD}/$1")"
    #}
    alias subl="'$(wslpath "$(where.exe subl | tr -d '\r')")'"
    #alias ssh="'$(wslpath "$(where.exe ssh | tr -d '\r')")'"
    #alias ssh-add="'$(wslpath "$(where.exe ssh-add | tr -d '\r')")'"
    alias git="'$(wslpath "$(where.exe git | tr -d '\r')")'"
    alias java="'$(wslpath "$(where.exe java | grep 21 | tr -d '\r')")'" # works from wsl with choco.exe install java
    alias mvn="PowerShell.exe mvn" # works from wsl with choco.exe install mvn
    alias intellij-idea='"$(ls -d "/mnt/c/Program Files/JetBrains/IntelliJ IDEA"* | sort -V | tail -n1)/bin/idea64.exe"'
    alias npm="'$(wslpath "$(where.exe npm | head -n 1 | tr -d '\r')")'"
    alias node="'$(wslpath "$(where.exe node | tr -d '\r')")'"
fi

# JAVA
# THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
if [ -f "/etc/wsl.conf" ];
then
  #export SDKMAN_DIR="/mnt/c/programs/sdkman"
else
  export SDKMAN_DIR="$HOME/.sdkman"
fi
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && source "$SDKMAN_DIR/bin/sdkman-init.sh"
[[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]] && sdk default java 17.0.12-oracle &> /dev/null
